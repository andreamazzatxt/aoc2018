{
  "version": 3,
  "sources": ["../../src/day08/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) => rawInput.split(\" \").map(Number)\nclass TreeNode {\n  header: {\n    metaNumber: number\n    childrenNumber: number\n  }\n  parent?: TreeNode\n  metaData: number[]\n  children: TreeNode[]\n  constructor(value: number[]) {\n    const [childrenNumber, metaNumber] = value\n    this.header = {\n      metaNumber: metaNumber,\n      childrenNumber: childrenNumber,\n    }\n    this.children = []\n    this.metaData = []\n  }\n\n  addChild(child: TreeNode) {\n    this.children.push(child)\n  }\n  addMetaData(metaData: number[]) {\n    this.metaData = metaData || []\n  }\n  getMetaDataSum() {\n    return this.metaData.reduce((acc, cur) => acc + cur, 0)\n  }\n  isDone = () => {\n    return this.children.length === this.header.childrenNumber\n  }\n}\n\nconst generateNodes = (input: number[]) => {\n  const nodes: TreeNode[] = []\n  const rootNode: TreeNode = new TreeNode(input.splice(0, 2))\n  nodes.push(rootNode)\n  let currentNode = rootNode\n  while (input.length > 0) {\n    if (currentNode.isDone()) {\n      currentNode.addMetaData(input.splice(0, currentNode.header.metaNumber))\n      currentNode = currentNode.parent!\n    } else {\n      const node = new TreeNode(input.splice(0, 2))\n      nodes.push(node)\n      node.parent = currentNode\n      currentNode.addChild(node)\n      currentNode = node\n    }\n  }\n  return {\n    nodes,\n    rootNode,\n  }\n}\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const { nodes, rootNode } = generateNodes(input)\n  return nodes\n    .map((node) => node.getMetaDataSum())\n    .reduce((acc, cur) => acc + cur, 0)\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const { rootNode } = generateNodes(input)\n\n  const getNodeValue = (node: TreeNode) => {\n    if (node.children.length === 0) {\n      return node.getMetaDataSum()\n    } else {\n      return node.metaData\n        .map((metaData) => {\n          if (metaData > node.children.length) {\n            return 0\n          } else {\n            return getNodeValue(node.children[metaData - 1])\n          }\n        })\n        .reduce((acc, cur) => acc + cur, 0)\n    }\n  }\n  return getNodeValue(rootNode)\n}\n\nrun({\n  part1: {\n    tests: [{ input: `2 3 0 3 10 11 12 1 1 0 1 99 2 1 1 2`, expected: 138 }],\n    solution: part1,\n  },\n  part2: {\n    tests: [{ input: `2 3 0 3 10 11 12 1 1 0 1 99 2 1 1 2`, expected: 66 }],\n    solution: part2,\n  },\n  trimTestInputs: true,\n})\n"],
  "mappings": "AAAA;AAEA,MAAM,aAAa,CAAC,aAAqB,SAAS,MAAM,KAAK,IAAI;AACjE,eAAe;AAAA,EAQb,YAAY,OAAiB;AAmB7B,kBAAS,MAAM;AACb,aAAO,KAAK,SAAS,WAAW,KAAK,OAAO;AAAA;AAnB5C,UAAM,CAAC,gBAAgB,cAAc;AACrC,SAAK,SAAS;AAAA,MACZ;AAAA,MACA;AAAA;AAEF,SAAK,WAAW;AAChB,SAAK,WAAW;AAAA;AAAA,EAGlB,SAAS,OAAiB;AACxB,SAAK,SAAS,KAAK;AAAA;AAAA,EAErB,YAAY,UAAoB;AAC9B,SAAK,WAAW,YAAY;AAAA;AAAA,EAE9B,iBAAiB;AACf,WAAO,KAAK,SAAS,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK;AAAA;AAAA;AAOzD,MAAM,gBAAgB,CAAC,UAAoB;AACzC,QAAM,QAAoB;AAC1B,QAAM,WAAqB,IAAI,SAAS,MAAM,OAAO,GAAG;AACxD,QAAM,KAAK;AACX,MAAI,cAAc;AAClB,SAAO,MAAM,SAAS,GAAG;AACvB,QAAI,YAAY,UAAU;AACxB,kBAAY,YAAY,MAAM,OAAO,GAAG,YAAY,OAAO;AAC3D,oBAAc,YAAY;AAAA,WACrB;AACL,YAAM,OAAO,IAAI,SAAS,MAAM,OAAO,GAAG;AAC1C,YAAM,KAAK;AACX,WAAK,SAAS;AACd,kBAAY,SAAS;AACrB,oBAAc;AAAA;AAAA;AAGlB,SAAO;AAAA,IACL;AAAA,IACA;AAAA;AAAA;AAIJ,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,EAAE,OAAO,aAAa,cAAc;AAC1C,SAAO,MACJ,IAAI,CAAC,SAAS,KAAK,kBACnB,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK;AAAA;AAGrC,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,EAAE,aAAa,cAAc;AAEnC,QAAM,eAAe,CAAC,SAAmB;AACvC,QAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,aAAO,KAAK;AAAA,WACP;AACL,aAAO,KAAK,SACT,IAAI,CAAC,aAAa;AACjB,YAAI,WAAW,KAAK,SAAS,QAAQ;AACnC,iBAAO;AAAA,eACF;AACL,iBAAO,aAAa,KAAK,SAAS,WAAW;AAAA;AAAA,SAGhD,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK;AAAA;AAAA;AAGvC,SAAO,aAAa;AAAA;AAGtB,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO,CAAC,EAAE,OAAO,uCAAuC,UAAU;AAAA,IAClE,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO,CAAC,EAAE,OAAO,uCAAuC,UAAU;AAAA,IAClE,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
