{
  "version": 3,
  "sources": ["../../src/day07/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) => rawInput.split(\"\\n\")\n\nclass Step {\n  value: string\n  dependencies: Step[]\n  done: boolean\n  isPorcessing: boolean\n\n  parents: Step[]\n\n  constructor(value: string, dependencies: Step[], parents: Step[]) {\n    this.done = false\n    this.value = value\n    this.dependencies = dependencies\n    this.parents = parents\n    this.isPorcessing = false\n  }\n  addParent(step: Step) {\n    this.parents.push(step)\n  }\n  addDependency(step: Step) {\n    this.dependencies.push(step)\n    this.dependencies.sort((a, b) => (a.value < b.value ? -1 : 1))\n  }\n  getDependencies() {\n    return this.dependencies\n  }\n  makeDone() {\n    this.done = true\n    this.isPorcessing = false\n  }\n  isDoable() {\n    return (\n      (this.parents.length === 0 ||\n        this.parents.every((parent) => parent.done)) &&\n      !this.done\n    )\n  }\n  startProcessing() {\n    this.isPorcessing = true\n  }\n  isTempDoable() {\n    return (\n      (this.parents.length === 0 ||\n        this.parents.every((parent) => parent.done)) &&\n      !this.isPorcessing &&\n      !this.done\n    )\n  }\n}\n\nclass Worker {\n  step: Step\n  eta: number\n\n  constructor(step: Step, timeLeft: number) {\n    this.step = step\n    this.eta = timeLeft\n  }\n\n  init(step: Step, timeLeft: number) {\n    this.step = step\n    this.eta = timeLeft\n    this.step.startProcessing()\n  }\n  finish() {\n    this.step.makeDone()\n    this.reset()\n  }\n  reset() {\n    this.step = null\n    this.eta = 0\n  }\n  getStep() {\n    return this.step\n  }\n  isFree() {\n    return this.step === null && this.eta === 0\n  }\n  isDone(time: number) {\n    return this.step !== null && this.eta === time\n  }\n}\n\nconst stepsMapping = (input: string[]) => {\n  const stepMap = new Map<string, Step>()\n  input.forEach((value) => {\n    const [, step, dependency] = value.match(\n      /Step (\\w) must be finished before step (\\w) can begin./,\n    )!\n    if (!stepMap.has(step)) {\n      stepMap.set(step, new Step(step, [], []))\n    }\n    if (!stepMap.has(dependency)) {\n      stepMap.set(dependency, new Step(dependency, [], []))\n    }\n    const stepObj = stepMap.get(step)!\n    const dependencyObj = stepMap.get(dependency)!\n    stepObj.addDependency(dependencyObj)\n    dependencyObj.addParent(stepObj)\n    return stepObj\n  })\n  return stepMap\n}\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const stepMap = stepsMapping(input)\n  const result = []\n  while (stepMap.size - 1 !== result.length) {\n    const nextStep = [...stepMap.values()]\n      .filter((step) => step.isDoable())\n      .sort((a, b) => {\n        return a.value < b.value ? -1 : 1\n      })[0]\n    result.push(nextStep.value)\n    nextStep.makeDone()\n  }\n  stepMap.forEach((step) => {\n    if (step.isDoable()) {\n      result.push(step.value)\n    }\n  })\n  return result.join(\"\")\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const stepMap = stepsMapping(input)\n  const steps = [...stepMap.values()]\n  let time = -1\n  const workers = new Array<Worker>(5).fill(null).map(() => new Worker(null, 0))\n  while (steps.some((step) => !step.done)) {\n    workers.forEach((worker) => worker.isDone(time) && worker.finish())\n    const freeWorkers = workers.filter((worker) => worker.isFree())\n    freeWorkers.forEach((worker) => {\n      const nextStep = steps\n        .filter((step) => step.isTempDoable())\n        .sort((a, b) => {\n          return a.value > b.value ? -1 : 1\n        })[0]\n      if (nextStep) {\n        worker.init(nextStep, time + nextStep.value.charCodeAt(0) - 4)\n      }\n    })\n    time += 1\n  }\n  return time\n}\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `Step C must be finished before step A can begin.\nStep C must be finished before step F can begin.\nStep A must be finished before step B can begin.\nStep A must be finished before step D can begin.\nStep B must be finished before step E can begin.\nStep D must be finished before step E can begin.\nStep F must be finished before step E can begin.`,\n        expected: \"CABDFE\",\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n})\n"],
  "mappings": "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",
  "names": []
}
