{
  "version": 3,
  "sources": ["../../src/day06/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((coord) => coord.split(\", \").map(Number))\n\nconst findOutset = (input: number[][]) => {\n  const maxX = Math.max(...input.map(([x]) => x))\n  const maxY = Math.max(...input.map(([, y]) => y))\n  return [maxX, maxY]\n}\nconst distance = ([x1, y1], [x2, y2]) => Math.abs(x2 - x1) + Math.abs(y2 - y1)\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const [maxX, maxY] = findOutset(input)\n  const grid = Array(maxX + 1)\n    .fill(0)\n    .map(() => Array(maxY + 1).fill(0))\n  grid.forEach((row, x) => {\n    row.forEach((_, y) => {\n      const distances = input.map(\n        ([x1, y1]) => Math.abs(x1 - x) + Math.abs(y1 - y),\n      )\n      const minDistance = Math.min(...distances)\n      const minIndex = distances.findIndex((d) => d === minDistance)\n      const isEquallyClose =\n        distances.filter((d) => d === minDistance).length === 1\n      grid[x][y] = isEquallyClose ? minIndex : \".\"\n    })\n  })\n  const infiniteAreasId = grid.reduce((acc, row, x) => {\n    if (x === 0 || x === maxX) {\n      row.forEach((_, y) => {\n        acc.add(grid[x][y])\n      })\n    } else {\n      row.forEach((_, y) => {\n        if (y === 0 || y === maxY) {\n          acc.add(grid[x][y])\n        }\n      })\n    }\n    return acc\n  }, new Set())\n  const counts = { \"\": 0 }\n  grid.forEach((row) => {\n    row.forEach((cell) => {\n      if (!infiniteAreasId.has(cell) || cell === \".\")\n        counts[cell] = (counts[cell] || 0) + 1\n    })\n  })\n  return Object.values(counts).reduce((acc, c) => Math.max(acc, c), 0)\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const [maxX, maxY] = findOutset(input)\n  let safeCount = 0\n  const grid = Array(maxX + 1)\n    .fill(0)\n    .map(() => Array(maxY + 1).fill(0))\n  grid.forEach((row, x) => {\n    row.forEach((_, y) => {\n      const distances = input.map(\n        ([x1, y1]) => Math.abs(x1 - x) + Math.abs(y1 - y),\n      )\n      const sum = distances.reduce((acc, d) => acc + d, 0)\n      if (sum < 10000) {\n        safeCount++\n      }\n    })\n  })\n  return safeCount\n}\n\nrun({\n  part1: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n})\n"],
  "mappings": "AAAA;AAEA,MAAM,aAAa,CAAC,aAClB,SAAS,MAAM,MAAM,IAAI,CAAC,UAAU,MAAM,MAAM,MAAM,IAAI;AAE5D,MAAM,aAAa,CAAC,UAAsB;AACxC,QAAM,OAAO,KAAK,IAAI,GAAG,MAAM,IAAI,CAAC,CAAC,OAAO;AAC5C,QAAM,OAAO,KAAK,IAAI,GAAG,MAAM,IAAI,CAAC,CAAC,EAAE,OAAO;AAC9C,SAAO,CAAC,MAAM;AAAA;AAEhB,MAAM,WAAW,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,QAAQ,KAAK,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK;AAC3E,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,CAAC,MAAM,QAAQ,WAAW;AAChC,QAAM,OAAO,MAAM,OAAO,GACvB,KAAK,GACL,IAAI,MAAM,MAAM,OAAO,GAAG,KAAK;AAClC,OAAK,QAAQ,CAAC,KAAK,MAAM;AACvB,QAAI,QAAQ,CAAC,GAAG,MAAM;AACpB,YAAM,YAAY,MAAM,IACtB,CAAC,CAAC,IAAI,QAAQ,KAAK,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK;AAEjD,YAAM,cAAc,KAAK,IAAI,GAAG;AAChC,YAAM,WAAW,UAAU,UAAU,CAAC,MAAM,MAAM;AAClD,YAAM,iBACJ,UAAU,OAAO,CAAC,MAAM,MAAM,aAAa,WAAW;AACxD,WAAK,GAAG,KAAK,iBAAiB,WAAW;AAAA;AAAA;AAG7C,QAAM,kBAAkB,KAAK,OAAO,CAAC,KAAK,KAAK,MAAM;AACnD,QAAI,MAAM,KAAK,MAAM,MAAM;AACzB,UAAI,QAAQ,CAAC,GAAG,MAAM;AACpB,YAAI,IAAI,KAAK,GAAG;AAAA;AAAA,WAEb;AACL,UAAI,QAAQ,CAAC,GAAG,MAAM;AACpB,YAAI,MAAM,KAAK,MAAM,MAAM;AACzB,cAAI,IAAI,KAAK,GAAG;AAAA;AAAA;AAAA;AAItB,WAAO;AAAA,KACN,IAAI;AACP,QAAM,SAAS,EAAE,IAAI;AACrB,OAAK,QAAQ,CAAC,QAAQ;AACpB,QAAI,QAAQ,CAAC,SAAS;AACpB,UAAI,CAAC,gBAAgB,IAAI,SAAS,SAAS;AACzC,eAAO,QAAS,QAAO,SAAS,KAAK;AAAA;AAAA;AAG3C,SAAO,OAAO,OAAO,QAAQ,OAAO,CAAC,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI;AAAA;AAGpE,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,CAAC,MAAM,QAAQ,WAAW;AAChC,MAAI,YAAY;AAChB,QAAM,OAAO,MAAM,OAAO,GACvB,KAAK,GACL,IAAI,MAAM,MAAM,OAAO,GAAG,KAAK;AAClC,OAAK,QAAQ,CAAC,KAAK,MAAM;AACvB,QAAI,QAAQ,CAAC,GAAG,MAAM;AACpB,YAAM,YAAY,MAAM,IACtB,CAAC,CAAC,IAAI,QAAQ,KAAK,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK;AAEjD,YAAM,MAAM,UAAU,OAAO,CAAC,KAAK,MAAM,MAAM,GAAG;AAClD,UAAI,MAAM,KAAO;AACf;AAAA;AAAA;AAAA;AAIN,SAAO;AAAA;AAGT,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
