{
  "version": 3,
  "sources": ["../../src/day03/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((claim) => {\n    const [id, _, coord, mesures] = claim.split(\" \")\n    const [x, y] = coord.replace(\":\", \"\").split(\",\")\n    const [width, height] = mesures.split(\"x\")\n    return {\n      id: parseInt(id.replace(\"#\", \"\")),\n      x: parseInt(x),\n      y: parseInt(y),\n      width: parseInt(width),\n      height: parseInt(height),\n    }\n  })\n\nconst makeFabric = (input: any) => {\n  const fabric = []\n  input.forEach((claim) => {\n    for (let x = claim.x; x < claim.x + claim.width; x++) {\n      for (let y = claim.y; y < claim.y + claim.height; y++) {\n        if (!fabric[x]) {\n          fabric[x] = []\n        }\n        if (!fabric[x][y]) {\n          fabric[x][y] = []\n        }\n        fabric[x][y].push(claim.id)\n      }\n    }\n  })\n  return fabric\n}\nconst checkClaim = (claim: any, fabric: any) => {\n  let intact = true\n  for (let x = claim.x; x < claim.x + claim.width; x++) {\n    for (let y = claim.y; y < claim.y + claim.height; y++) {\n      if (fabric[x][y].length > 1) {\n        intact = false\n      }\n    }\n  }\n  return intact\n}\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const fabric = makeFabric(input)\n  return fabric.reduce((acc, row) => {\n    return row.filter((ids) => ids.length > 1).length + acc\n  }, 0)\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const fabric = makeFabric(input)\n  return input.find((claim) => checkClaim(claim, fabric)).id\n}\n\nrun({\n  part1: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n})\n"],
  "mappings": "AAAA;AAEA,MAAM,aAAa,CAAC,aAClB,SAAS,MAAM,MAAM,IAAI,CAAC,UAAU;AAClC,QAAM,CAAC,IAAI,GAAG,OAAO,WAAW,MAAM,MAAM;AAC5C,QAAM,CAAC,GAAG,KAAK,MAAM,QAAQ,KAAK,IAAI,MAAM;AAC5C,QAAM,CAAC,OAAO,UAAU,QAAQ,MAAM;AACtC,SAAO;AAAA,IACL,IAAI,SAAS,GAAG,QAAQ,KAAK;AAAA,IAC7B,GAAG,SAAS;AAAA,IACZ,GAAG,SAAS;AAAA,IACZ,OAAO,SAAS;AAAA,IAChB,QAAQ,SAAS;AAAA;AAAA;AAIvB,MAAM,aAAa,CAAC,UAAe;AACjC,QAAM,SAAS;AACf,QAAM,QAAQ,CAAC,UAAU;AACvB,aAAS,IAAI,MAAM,GAAG,IAAI,MAAM,IAAI,MAAM,OAAO,KAAK;AACpD,eAAS,IAAI,MAAM,GAAG,IAAI,MAAM,IAAI,MAAM,QAAQ,KAAK;AACrD,YAAI,CAAC,OAAO,IAAI;AACd,iBAAO,KAAK;AAAA;AAEd,YAAI,CAAC,OAAO,GAAG,IAAI;AACjB,iBAAO,GAAG,KAAK;AAAA;AAEjB,eAAO,GAAG,GAAG,KAAK,MAAM;AAAA;AAAA;AAAA;AAI9B,SAAO;AAAA;AAET,MAAM,aAAa,CAAC,OAAY,WAAgB;AAC9C,MAAI,SAAS;AACb,WAAS,IAAI,MAAM,GAAG,IAAI,MAAM,IAAI,MAAM,OAAO,KAAK;AACpD,aAAS,IAAI,MAAM,GAAG,IAAI,MAAM,IAAI,MAAM,QAAQ,KAAK;AACrD,UAAI,OAAO,GAAG,GAAG,SAAS,GAAG;AAC3B,iBAAS;AAAA;AAAA;AAAA;AAIf,SAAO;AAAA;AAET,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,SAAS,WAAW;AAC1B,SAAO,OAAO,OAAO,CAAC,KAAK,QAAQ;AACjC,WAAO,IAAI,OAAO,CAAC,QAAQ,IAAI,SAAS,GAAG,SAAS;AAAA,KACnD;AAAA;AAGL,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,SAAS,WAAW;AAC1B,SAAO,MAAM,KAAK,CAAC,UAAU,WAAW,OAAO,SAAS;AAAA;AAG1D,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
