{
  "version": 3,
  "sources": ["../../src/day10/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((l) =>\n    l\n      .match(/position=< ?(-?\\d+),  ?(-?\\d+)> velocity=< ?(-?\\d+),  ?(-?\\d+)>/)\n      .slice(1)\n      .map(Number),\n  )\n\nclass LightPoint {\n  x: number\n  y: number\n  xVel: number\n  yVel: number\n  constructor(x: number, y: number, xVel: number, yVel: number) {\n    this.x = x\n    this.y = y\n    this.xVel = xVel\n    this.yVel = yVel\n  }\n  tick() {\n    this.x += this.xVel\n    this.y += this.yVel\n  }\n}\n\nclass Sky {\n  lights: LightPoint[]\n  constructor(lights: LightPoint[]) {\n    this.lights = lights\n  }\n  tick() {\n    this.lights.forEach((l) => l.tick())\n    const { width, height } = this.getMesures()\n    return width * height\n  }\n  tickBack() {\n    this.lights.forEach((l) => {\n      l.x -= l.xVel\n      l.y -= l.yVel\n    })\n  }\n  getMesures() {\n    const minX = Math.min(...this.lights.map((l) => l.x))\n    const maxX = Math.max(...this.lights.map((l) => l.x))\n    const minY = Math.min(...this.lights.map((l) => l.y))\n    const maxY = Math.max(...this.lights.map((l) => l.y))\n    const width = maxX - minX + 1\n    const height = maxY - minY + 1\n    return { width, height, minX, minY, maxX, maxY }\n  }\n  render() {\n    const { width, height, minX, minY } = this.getMesures()\n    const grid = Array(height)\n      .fill(0)\n      .map(() => Array(width).fill(\" \"))\n    this.lights.forEach((l) => {\n      grid[l.y - minY][l.x - minX] = \"#\"\n    })\n    return grid.map((row) => row.join(\"\")).join(\"\\n\")\n  }\n}\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  let area: number\n  const sky = new Sky(\n    input.map(([x, y, xVel, yVel]) => new LightPoint(x, y, xVel, yVel)),\n  )\n  let count = 0\n  while (true) {\n    count++\n    const newArea = sky.tick()\n    if (!area || newArea < area) {\n      area = newArea\n    } else {\n      sky.tickBack()\n      count--\n      break\n    }\n  }\n\n  console.log(sky.render())\n  console.log(count)\n\n  // get the result dysplayed in the console\n  return \"\"\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  part1(rawInput)\n  return\n}\n\nrun({\n  part1: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n})\n"],
  "mappings": "AAAA;AAEA,MAAM,aAAa,CAAC,aAClB,SAAS,MAAM,MAAM,IAAI,CAAC,MACxB,EACG,MAAM,mEACN,MAAM,GACN,IAAI;AAGX,iBAAiB;AAAA,EAKf,YAAY,GAAW,GAAW,MAAc,MAAc;AAC5D,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,OAAO;AACZ,SAAK,OAAO;AAAA;AAAA,EAEd,OAAO;AACL,SAAK,KAAK,KAAK;AACf,SAAK,KAAK,KAAK;AAAA;AAAA;AAInB,UAAU;AAAA,EAER,YAAY,QAAsB;AAChC,SAAK,SAAS;AAAA;AAAA,EAEhB,OAAO;AACL,SAAK,OAAO,QAAQ,CAAC,MAAM,EAAE;AAC7B,UAAM,EAAE,OAAO,WAAW,KAAK;AAC/B,WAAO,QAAQ;AAAA;AAAA,EAEjB,WAAW;AACT,SAAK,OAAO,QAAQ,CAAC,MAAM;AACzB,QAAE,KAAK,EAAE;AACT,QAAE,KAAK,EAAE;AAAA;AAAA;AAAA,EAGb,aAAa;AACX,UAAM,OAAO,KAAK,IAAI,GAAG,KAAK,OAAO,IAAI,CAAC,MAAM,EAAE;AAClD,UAAM,OAAO,KAAK,IAAI,GAAG,KAAK,OAAO,IAAI,CAAC,MAAM,EAAE;AAClD,UAAM,OAAO,KAAK,IAAI,GAAG,KAAK,OAAO,IAAI,CAAC,MAAM,EAAE;AAClD,UAAM,OAAO,KAAK,IAAI,GAAG,KAAK,OAAO,IAAI,CAAC,MAAM,EAAE;AAClD,UAAM,QAAQ,OAAO,OAAO;AAC5B,UAAM,SAAS,OAAO,OAAO;AAC7B,WAAO,EAAE,OAAO,QAAQ,MAAM,MAAM,MAAM;AAAA;AAAA,EAE5C,SAAS;AACP,UAAM,EAAE,OAAO,QAAQ,MAAM,SAAS,KAAK;AAC3C,UAAM,OAAO,MAAM,QAChB,KAAK,GACL,IAAI,MAAM,MAAM,OAAO,KAAK;AAC/B,SAAK,OAAO,QAAQ,CAAC,MAAM;AACzB,WAAK,EAAE,IAAI,MAAM,EAAE,IAAI,QAAQ;AAAA;AAEjC,WAAO,KAAK,IAAI,CAAC,QAAQ,IAAI,KAAK,KAAK,KAAK;AAAA;AAAA;AAGhD,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,MAAI;AACJ,QAAM,MAAM,IAAI,IACd,MAAM,IAAI,CAAC,CAAC,GAAG,GAAG,MAAM,UAAU,IAAI,WAAW,GAAG,GAAG,MAAM;AAE/D,MAAI,QAAQ;AACZ,SAAO,MAAM;AACX;AACA,UAAM,UAAU,IAAI;AACpB,QAAI,CAAC,QAAQ,UAAU,MAAM;AAC3B,aAAO;AAAA,WACF;AACL,UAAI;AACJ;AACA;AAAA;AAAA;AAIJ,UAAQ,IAAI,IAAI;AAChB,UAAQ,IAAI;AAGZ,SAAO;AAAA;AAGT,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM;AACN;AAAA;AAGF,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
