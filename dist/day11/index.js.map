{
  "version": 3,
  "sources": ["../../src/day11/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) => parseInt(rawInput)\n\nclass Grid {\n  input: number\n  grid: Map<string, number>\n  constructor(input: number) {\n    this.input = input\n    this.generateGrid()\n  }\n  get(x: number, y: number) {\n    if (x < 0 || x > 299 || y < 0 || y > 299) {\n      return 0\n    }\n    return this.grid.get(`${x},${y}`) || 0\n  }\n  getMax(size: number) {\n    let max = 0\n    let maxX = 0\n    let maxY = 0\n    for (let i = 0; i < 300 - size; i++) {\n      for (let j = 0; j < 300 - size; j++) {\n        let sum = 0\n        if (i + size <= 300 && j + size <= 300) {\n          for (let x = i; x < i + size; x++) {\n            for (let y = j; y < j + size; y++) {\n              sum += this.get(x, y)\n            }\n          }\n        }\n        if (sum > max) {\n          max = sum\n          maxX = i\n          maxY = j\n        }\n      }\n    }\n    return { max, maxX, maxY, size }\n  }\n  generateGrid() {\n    this.grid = new Map<string, number>()\n    for (let i = 0; i < 300; i++) {\n      for (let j = 0; j < 300; j++) {\n        const rackId = i + 10 + 1\n        let powerLevel = rackId * (j + 1) + this.input\n        powerLevel *= rackId\n        powerLevel = Math.floor(powerLevel / 100)\n        powerLevel = Math.floor(powerLevel % 10)\n        powerLevel -= 5\n        this.grid.set(`${i},${j}`, powerLevel)\n      }\n    }\n  }\n}\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const grid = new Grid(input)\n  const { maxX, maxY } = grid.getMax(3)\n  return `${maxX + 1},${maxY + 1}`\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  const grid = new Grid(input)\n  let currentMax = { max: 0, maxX: 0, maxY: 0, size: 0 }\n  for (let size = 1; size <= 18; size++) {\n    const { max, maxX, maxY } = grid.getMax(size)\n    if (max > currentMax.max) {\n      currentMax = { max, maxX, maxY, size }\n    }\n  }\n  return `${currentMax.maxX + 1},${currentMax.maxY + 1},${currentMax.size}`\n}\n\nrun({\n  part1: {\n    tests: [{ input: `42`, expected: \"21,61\" }],\n    solution: part1,\n  },\n  part2: {\n    // tests: [{ input: `18`, expected: \"90,269,16\" }],\n    solution: part2,\n  },\n  trimTestInputs: true,\n})\n"],
  "mappings": "AAAA;AAEA,MAAM,aAAa,CAAC,aAAqB,SAAS;AAElD,WAAW;AAAA,EAGT,YAAY,OAAe;AACzB,SAAK,QAAQ;AACb,SAAK;AAAA;AAAA,EAEP,IAAI,GAAW,GAAW;AACxB,QAAI,IAAI,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,KAAK;AACxC,aAAO;AAAA;AAET,WAAO,KAAK,KAAK,IAAI,GAAG,KAAK,QAAQ;AAAA;AAAA,EAEvC,OAAO,MAAc;AACnB,QAAI,MAAM;AACV,QAAI,OAAO;AACX,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,MAAM,MAAM,KAAK;AACnC,eAAS,IAAI,GAAG,IAAI,MAAM,MAAM,KAAK;AACnC,YAAI,MAAM;AACV,YAAI,IAAI,QAAQ,OAAO,IAAI,QAAQ,KAAK;AACtC,mBAAS,IAAI,GAAG,IAAI,IAAI,MAAM,KAAK;AACjC,qBAAS,IAAI,GAAG,IAAI,IAAI,MAAM,KAAK;AACjC,qBAAO,KAAK,IAAI,GAAG;AAAA;AAAA;AAAA;AAIzB,YAAI,MAAM,KAAK;AACb,gBAAM;AACN,iBAAO;AACP,iBAAO;AAAA;AAAA;AAAA;AAIb,WAAO,EAAE,KAAK,MAAM,MAAM;AAAA;AAAA,EAE5B,eAAe;AACb,SAAK,OAAO,IAAI;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,cAAM,SAAS,IAAI,KAAK;AACxB,YAAI,aAAa,SAAU,KAAI,KAAK,KAAK;AACzC,sBAAc;AACd,qBAAa,KAAK,MAAM,aAAa;AACrC,qBAAa,KAAK,MAAM,aAAa;AACrC,sBAAc;AACd,aAAK,KAAK,IAAI,GAAG,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAKnC,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,OAAO,IAAI,KAAK;AACtB,QAAM,EAAE,MAAM,SAAS,KAAK,OAAO;AACnC,SAAO,GAAG,OAAO,KAAK,OAAO;AAAA;AAG/B,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,OAAO,IAAI,KAAK;AACtB,MAAI,aAAa,EAAE,KAAK,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM;AACnD,WAAS,OAAO,GAAG,QAAQ,IAAI,QAAQ;AACrC,UAAM,EAAE,KAAK,MAAM,SAAS,KAAK,OAAO;AACxC,QAAI,MAAM,WAAW,KAAK;AACxB,mBAAa,EAAE,KAAK,MAAM,MAAM;AAAA;AAAA;AAGpC,SAAO,GAAG,WAAW,OAAO,KAAK,WAAW,OAAO,KAAK,WAAW;AAAA;AAGrE,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO,CAAC,EAAE,OAAO,MAAM,UAAU;AAAA,IACjC,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IAEL,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
