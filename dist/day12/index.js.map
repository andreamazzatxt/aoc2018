{
  "version": 3,
  "sources": ["../../src/day12/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\nimport { CLIENT_RENEG_WINDOW } from \"tls\"\nimport { log } from \"./../utils/index.js\"\n\nconst parseInput = (rawInput: string) => rawInput.split(\"\\n\\n\")\n\nconst pad = (string: string) => {\n  return \"...\" + string + \"...\"\n}\n\nconst part1 = (rawInput: string) => {\n  const [rawInitial, rawRules] = parseInput(rawInput)\n  let state = \"...\" + rawInitial.split(\" \")[2] + \"...\"\n  const rules = {}\n  rawRules.split(\"\\n\").forEach((rule) => {\n    const [pattern, result] = rule.split(\" => \")\n    rules[pattern] = result\n  })\n  let initialIndex = 3\n  for (let i = 0; i < 20; i++) {\n    state = pad(state)\n    initialIndex += 3\n    let newState = state.replace(/#/g, \".\")\n    for (let j = 0; j < state.length; j++) {\n      for (const [pattern, result] of Object.entries(rules)) {\n        if (pattern === state.substr(j, pattern.length)) {\n          newState =\n            newState.substr(0, j + 2) +\n            result +\n            newState.substr(j + pattern.length)\n        }\n      }\n    }\n    state = newState\n  }\n  let sum = 0\n  for (let i = 0; i < state.length; i++) {\n    if (state[i] === \"#\") {\n      sum += i - initialIndex\n    }\n  }\n  return sum\n}\n\nconst part2 = (rawInput: string) => {\n  const [rawInitial, rawRules] = parseInput(rawInput)\n  let state = \"...\" + rawInitial.split(\" \")[2] + \"...\"\n  const rules = {}\n  rawRules.split(\"\\n\").forEach((rule) => {\n    const [pattern, result] = rule.split(\" => \")\n    rules[pattern] = result\n  })\n  let initialIndex = 3\n\n  for (let i = 0; i < 200; i++) {\n    state = pad(state)\n    initialIndex += 3\n    let newState = state.replace(/#/g, \".\")\n    for (let j = 0; j < state.length; j++) {\n      for (const [pattern, result] of Object.entries(rules)) {\n        if (pattern === state.substr(j, pattern.length)) {\n          newState =\n            newState.substr(0, j + 2) +\n            result +\n            newState.substr(j + pattern.length)\n        }\n      }\n    }\n    state = newState\n  }\n  let sum = 0\n  for (let i = 0; i < state.length; i++) {\n    if (state[i] === \"#\") {\n      sum += i - initialIndex\n    }\n  }\n  const numOfPots = state.split(\"\").filter((pot) => pot === \"#\").length\n\n  return sum + (50000000000 - 200) * numOfPots\n}\n\nrun({\n  part1: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n})\n"],
  "mappings": "AAAA;AAIA,MAAM,aAAa,CAAC,aAAqB,SAAS,MAAM;AAExD,MAAM,MAAM,CAAC,WAAmB;AAC9B,SAAO,QAAQ,SAAS;AAAA;AAG1B,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,CAAC,YAAY,YAAY,WAAW;AAC1C,MAAI,QAAQ,QAAQ,WAAW,MAAM,KAAK,KAAK;AAC/C,QAAM,QAAQ;AACd,WAAS,MAAM,MAAM,QAAQ,CAAC,SAAS;AACrC,UAAM,CAAC,SAAS,UAAU,KAAK,MAAM;AACrC,UAAM,WAAW;AAAA;AAEnB,MAAI,eAAe;AACnB,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,YAAQ,IAAI;AACZ,oBAAgB;AAChB,QAAI,WAAW,MAAM,QAAQ,MAAM;AACnC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,iBAAW,CAAC,SAAS,WAAW,OAAO,QAAQ,QAAQ;AACrD,YAAI,YAAY,MAAM,OAAO,GAAG,QAAQ,SAAS;AAC/C,qBACE,SAAS,OAAO,GAAG,IAAI,KACvB,SACA,SAAS,OAAO,IAAI,QAAQ;AAAA;AAAA;AAAA;AAIpC,YAAQ;AAAA;AAEV,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,QAAI,MAAM,OAAO,KAAK;AACpB,aAAO,IAAI;AAAA;AAAA;AAGf,SAAO;AAAA;AAGT,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,CAAC,YAAY,YAAY,WAAW;AAC1C,MAAI,QAAQ,QAAQ,WAAW,MAAM,KAAK,KAAK;AAC/C,QAAM,QAAQ;AACd,WAAS,MAAM,MAAM,QAAQ,CAAC,SAAS;AACrC,UAAM,CAAC,SAAS,UAAU,KAAK,MAAM;AACrC,UAAM,WAAW;AAAA;AAEnB,MAAI,eAAe;AAEnB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,YAAQ,IAAI;AACZ,oBAAgB;AAChB,QAAI,WAAW,MAAM,QAAQ,MAAM;AACnC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,iBAAW,CAAC,SAAS,WAAW,OAAO,QAAQ,QAAQ;AACrD,YAAI,YAAY,MAAM,OAAO,GAAG,QAAQ,SAAS;AAC/C,qBACE,SAAS,OAAO,GAAG,IAAI,KACvB,SACA,SAAS,OAAO,IAAI,QAAQ;AAAA;AAAA;AAAA;AAIpC,YAAQ;AAAA;AAEV,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,QAAI,MAAM,OAAO,KAAK;AACpB,aAAO,IAAI;AAAA;AAAA;AAGf,QAAM,YAAY,MAAM,MAAM,IAAI,OAAO,CAAC,QAAQ,QAAQ,KAAK;AAE/D,SAAO,MAAO,QAAc,OAAO;AAAA;AAGrC,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
