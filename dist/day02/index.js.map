{
  "version": 3,
  "sources": ["../../src/day02/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\"\n\nconst parseInput = (rawInput: string) => rawInput.split(\"\\n\")\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  let twoCount = 0\n  let threeCount = 0\n  input.forEach((id) => {\n    const counts = {}\n    id.split(\"\").forEach((char) => {\n      counts[char] = (counts[char] || 0) + 1\n    })\n    if (Object.values(counts).includes(2)) {\n      twoCount++\n    }\n    if (Object.values(counts).includes(3)) {\n      threeCount++\n    }\n  })\n  return twoCount * threeCount\n}\n\nconst isMatching = (a: string, b: string): boolean => {\n  let diffCount = 0\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      diffCount++\n    }\n  }\n  return diffCount === 1\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput)\n  let result = \"\"\n  for (let i = 0; i < input.length; i++) {\n    for (let j = 0; j < input.length; j++) {\n      if (isMatching(input[i], input[j])) {\n        result = input[i]\n          .split(\"\")\n          .filter((char, index) => char === input[j][index])\n          .join(\"\")\n      }\n    }\n  }\n  return result\n}\n\nrun({\n  part1: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      // { input: ``, expected: \"\" },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n})\n"],
  "mappings": "AAAA;AAEA,MAAM,aAAa,CAAC,aAAqB,SAAS,MAAM;AAExD,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,MAAI,WAAW;AACf,MAAI,aAAa;AACjB,QAAM,QAAQ,CAAC,OAAO;AACpB,UAAM,SAAS;AACf,OAAG,MAAM,IAAI,QAAQ,CAAC,SAAS;AAC7B,aAAO,QAAS,QAAO,SAAS,KAAK;AAAA;AAEvC,QAAI,OAAO,OAAO,QAAQ,SAAS,IAAI;AACrC;AAAA;AAEF,QAAI,OAAO,OAAO,QAAQ,SAAS,IAAI;AACrC;AAAA;AAAA;AAGJ,SAAO,WAAW;AAAA;AAGpB,MAAM,aAAa,CAAC,GAAW,MAAuB;AACpD,MAAI,YAAY;AAChB,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,QAAI,EAAE,OAAO,EAAE,IAAI;AACjB;AAAA;AAAA;AAGJ,SAAO,cAAc;AAAA;AAGvB,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,WAAW,MAAM,IAAI,MAAM,KAAK;AAClC,iBAAS,MAAM,GACZ,MAAM,IACN,OAAO,CAAC,MAAM,UAAU,SAAS,MAAM,GAAG,QAC1C,KAAK;AAAA;AAAA;AAAA;AAId,SAAO;AAAA;AAGT,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,IAGP,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
